
// Function to populate the Pre-Set Croquis dropdown
function populateCroquisDropdown() {
  const croquisDropdown = document.getElementById('preset-croquis');
  const croquisTemplates = ['Template 1', 'Template 2', 'Template 3'];

  croquisTemplates.forEach(template => {
    const option = document.createElement('option');
    option.value = template;
    option.text = template;
    croquisDropdown.appendChild(option);
  });
}

// Function to toggle Symmetry Tool settings based on checkbox state
function toggleSymmetrySettings() {
  const symmetryCheckbox = document.getElementById('symmetry-tool');
  const symmetrySettings = document.getElementById('symmetry-settings');

  symmetryCheckbox.addEventListener('change', function () {
    symmetrySettings.style.display = symmetryCheckbox.checked ? 'block' : 'none';
    // Implement your code to enable or customize the Symmetry Tool here
  });
}

// Function to customize Smart Zoom Tool settings
function customizeSmartZoomSettings() {
  const smartZoomCheckbox = document.getElementById('smart-zoom');
  const smartZoomSettings = document.getElementById('smart-zoom-settings');
  const zoomLevelInput = document.getElementById('zoom-level');
  const panSpeedInput = document.getElementById('pan-speed');

  smartZoomCheckbox.addEventListener('change', function () {
    smartZoomSettings.style.display = smartZoomCheckbox.checked ? 'block' : 'none';
    // Implement your code to enable or customize the Smart Zoom Tool here
  });

  // Add event listeners to input elements to update settings
  zoomLevelInput.addEventListener('input', function () {
    // Update the zoom level setting
    const zoomLevelValue = zoomLevelInput.value;
    // Implement your code to apply the zoom level setting here
  });

  panSpeedInput.addEventListener('input', function () {
    // Update the pan speed setting
    const panSpeedValue = panSpeedInput.value;
    // Implement your code to apply the pan speed setting here
  });
}

// Function to populate the Preloaded Graphic Styles dropdown
function populateGraphicStylesDropdown() {
  const graphicStylesDropdown = document.getElementById('graphic-styles');
  const graphicStyles = ['Style 1', 'Style 2', 'Style 3'];

  graphicStyles.forEach(style => {
    const option = document.createElement('option');
    option.value = style;
    option.text = style;
    graphicStylesDropdown.appendChild(option);
  });
}

// Function to handle Export and Sharing
function handleExportAndSharing() {
  const exportButton = document.getElementById('export-sketch-button');
  const exportModal = document.getElementById('export-modal');
  const closeExportModalButton = document.getElementById('close-export-modal');
  const exportSettingsButton = document.getElementById('export-settings-button');
  const importSettingsButton = document.getElementById('import-settings-button');

  exportButton.addEventListener('click', function () {
    exportModal.style.display = 'block';
  });

  closeExportModalButton.addEventListener('click', function () {
    exportModal.style.display = 'none';
  });

  // Implement your code for export options and actions here
  const exportActionButton = document.getElementById('export-action-button');
  exportActionButton.addEventListener('click', function () {
    // Perform the export action here (e.g., save the sketch to a file)
    // Close the export modal
    exportModal.style.display = 'none';
  });

  // Export Settings
  exportSettingsButton.addEventListener('click', function () {
    const settings = {
      symmetryEnabled: document.getElementById('symmetry-tool').checked,
      zoomLevel: document.getElementById('zoom-level').value,
      panSpeed: document.getElementById('pan-speed').value,
      selectedCroquis: document.getElementById('preset-croquis').value,
      selectedGraphicStyle: document.getElementById('graphic-styles').value,
    };

    const settingsBlob = new Blob([JSON.stringify(settings)], {
      type: 'application/json',
    });
    const settingsUrl = URL.createObjectURL(settingsBlob);

    const a = document.createElement('a');
    a.href = settingsUrl;
    a.download = 'settings.json';
    a.click();
  });

  // Import Settings
  importSettingsButton.addEventListener('change', function () {
    const fileInput = document.getElementById('import-settings-input');
    const file = fileInput.files[0];
    const reader = new FileReader();

    reader.onload = function (e) {
      const importedSettings = JSON.parse(e.target.result);
      // Implement code to apply imported settings here
      // For example, update UI elements with the imported settings
    };

    reader.readAsText(file);
  });
}

// Function to handle User Documentation
function handleUserDocumentation() {
  const userDocumentationLink = document.getElementById('user-documentation-link');

  userDocumentationLink.addEventListener('click', function (e) {
    e.preventDefault();
    // Implement your code to open user documentation, tutorials, or a help center within the extension
  });
}

// Call the functions to initialize the UI elements