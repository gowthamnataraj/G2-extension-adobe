
function populateCroquisDropdown() {
  const croquisDropdown = document.getElementById('preset-croquis');
  const croquisTemplates = ['Template 1', 'Template 2', 'Template 3'];

  croquisTemplates.forEach(template => {
    const option = document.createElement('option');
    option.value = template;
    option.text = template;
    croquisDropdown.appendChild(option);
  });
}

function toggleSymmetrySettings() {
  const symmetryCheckbox = document.getElementById('symmetry-tool');
  const symmetrySettings = document.getElementById('symmetry-settings');

  symmetryCheckbox.addEventListener('change', function () {
    symmetrySettings.style.display = symmetryCheckbox.checked ? 'block' : 'none';
  });
}

function customizeSmartZoomSettings() {
  const smartZoomCheckbox = document.getElementById('smart-zoom');
  const smartZoomSettings = document.getElementById('smart-zoom-settings');
  const zoomLevelInput = document.getElementById('zoom-level');
  const panSpeedInput = document.getElementById('pan-speed');

  smartZoomCheckbox.addEventListener('change', function () {
    smartZoomSettings.style.display = smartZoomCheckbox.checked ? 'block' : 'none';
  });

  zoomLevelInput.addEventListener('input', function () {
    const zoomLevelValue = zoomLevelInput.value;
  });

  panSpeedInput.addEventListener('input', function () {
    const panSpeedValue = panSpeedInput.value;
  });
}

function populateGraphicStylesDropdown() {
  const graphicStylesDropdown = document.getElementById('graphic-styles');
  const graphicStyles = ['Style 1', 'Style 2', 'Style 3'];

  graphicStyles.forEach(style => {
    const option = document.createElement('option');
    option.value = style;
    option.text = style;
    graphicStylesDropdown.appendChild(option);
  });
}

function handleExportAndSharing() {
  const exportButton = document.getElementById('export-sketch-button');
  const exportModal = document.getElementById('export-modal');
  const closeExportModalButton = document.getElementById('close-export-modal');
  const exportSettingsButton = document.getElementById('export-settings-button');
  const importSettingsButton = document.getElementById('import-settings-button');

  exportButton.addEventListener('click', function () {
    exportModal.style.display = 'block';
  });

  closeExportModalButton.addEventListener('click', function () {
    exportModal.style.display = 'none';
  });

  const exportActionButton = document.getElementById('export-action-button');
  exportActionButton.addEventListener('click', function () {
    exportModal.style.display = 'none';
  });

  exportSettingsButton.addEventListener('click', function () {
    const settings = {
      symmetryEnabled: document.getElementById('symmetry-tool').checked,
      zoomLevel: document.getElementById('zoom-level').value,
      panSpeed: document.getElementById('pan-speed').value,
      selectedCroquis: document.getElementById('preset-croquis').value,
      selectedGraphicStyle: document.getElementById('graphic-styles').value,
    };

    const settingsBlob = new Blob([JSON.stringify(settings)], {
      type: 'application/json',
    });
    const settingsUrl = URL.createObjectURL(settingsBlob);

    const a = document.createElement('a');
    a.href = settingsUrl;
    a.download = 'settings.json';
    a.click();
  });

  importSettingsButton.addEventListener('change', function () {
    const fileInput = document.getElementById('import-settings-input');
    const file = fileInput.files[0];
    const reader = new FileReader();

    reader.onload = function (e) {
      const importedSettings = JSON.parse(e.target.result);
    };

    reader.readAsText(file);
  });
}

function handleUserDocumentation() {
  const userDocumentationLink = document.getElementById('user-documentation-link');

  userDocumentationLink.addEventListener('click', function (e) {
    e.preventDefault();
  });
}

